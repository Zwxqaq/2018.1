###先提及数据类型的注意事项：
        #整数就是int，小数就是double
        #整数赋值给byte/short，会判断值是否在范围内，如果是会自动转换为相应类型，否则还是int类型
        #如果错误，是编译错误（语法错误）
        #如果是小数的话，想要是flaot类型，在数值后面必须加上f，eg：flaot f=1.0F；
        #不然会自动认为是double类型的
        #除非你使用强制转换，但是如下byte b=(byte)129;
                                  System.out.println(b);
        打印的结果为-127，得出的值并不一定是你所想要的结果，故而使用前自我商榷
###运算符
        #1算数运算符
                #一元算数运算符
                        #i++，++i
                        #i--，--i
                #二元算数运算符
                        # + - * / %
                        # %中，取余的正负数取决第一个数
                        #结论：看都double结果，类型肯定为double
                        没有double，看到float，结果类型肯定为float，
                        也没float，看到long类型结果为long，也没有结果为int
                        #即byte+ byte-->int
                           byte+short-->int
                           byte+  int-->int
                           byte+ long-->long
                           byte+double-->double
        #2关系运算符
                # > >= < <= == !=
        #3逻辑运算符
                # ！ 
                # A&&B 如A为假不看B的真假 即为假   短路现象
                # A||B 如A为真不看B的真假 即为真   短路现象
                #  A|B AB都必须判断 位或
                #  A&B AB都必须判断 位与
        #4赋值运算符
                # = *= /= %= += -=
        #5三元运算符
                #条件？值1：值2
                #当条件成立时返回值1，否则返回值2
                #eg：i>j?19.0:20 此时返回20.0不是20！
                #即如果存在浮点型的比较时，返回结果也为浮点型
        #6位运算
                # & | 上述，不在说明
                # ~ 计算机保存都是以补码的形式，正数补码反码与原码相同，负数不同
                        如 ~3 =-4
                        原码         0……0011      ---> 3
                        取反（补码）  1……1100
                        负数反码      1……1011
                        负数原码      1……0100     ---> -4  
                # ^ 相同为0，相异为1
                # >> 向右移  8>>2   -->2
                   如 -1>>2
                        原码 1……0001  --->  1……0011>>2  ---> 补码 1……1111
                        反码 1……1110                         反码 1……1110
                        补码 1……1111                         原码 1……0001  ----> -1
                # << 向左移  8<<2   -->32
                # 左移相当*2  右移/2
                # 0为正数
        #运算符比较优先级
                #（）>算术>关系>逻辑>赋值
                
                
       
          
                
