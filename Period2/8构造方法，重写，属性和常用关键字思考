###构造方法Constructor
    #用于初始化对象
    #这里干脆写出[java对象的创建和使用]
      #必须使用new关键字创建对象
      #只能通过引用来使用对象
        #引用变量名.属性;
        #引用变量名.方法名（实参列表）;              为何是实参列表，废话，对象是具体的数据
    
    #是创建对象时被自动调用的特殊方法
    #特点：
      #构造方法和类名必须一致
      #java通过new关键字调用构造方法，从而返回类的对象或叫实例
      #构造方法有返回值，但是不能定义返回值的类型，因为返回的是本类的对象，不能在构造方法里面使用return
      来返回一个值
      #如果没有定义构造方法，编译器会自动定义一个无参构造方法，
      如果已经定义了构造方法，编译器不会自动再添加（有参构造），
      但是我们习惯在存在有参构造的时候，也定义一个无参构造（有时候用于打印信息，或者类的实例化）
    #声明格式：
      #[修饰符] 类名（形参列表）{……}
 ###重写 override
    #重写必须要有继承 inherit
    #方法名（形参）要相同
    #返回类型是引用类型，子类的类型要小于等于父类的类型    ？
    #访问权限的问题                 ？
    #this：指代当前对象的地址
    #super：指代父类对象的地址
 ###属性 field
    #用于定义该类（static使其为类属性）或该类对象包含的数据
    #属性作用范围是整个类中
    #属性默认初始化，数值类型的（0，0.0），char类型的（\u0000），boolean类型的（false），引用类型的（null）
   #属性格式 format
      #[修饰符] 属性类型 属性名：[默认值]；  //[]表示修饰符可有可无
 ###常用关键字：
    #this关键字
      #为何在构造方法中也可以使用this？
        #首先我们先思考一下对象的创建过程
          #分配对象空间，并将属性初始化
          #执行属性值的显示初始化
          #执行构造方法---->在构造方法之前，对象已经创建占用了内存空间
          #返回对象地址给引用变量----->令其装入stack中
      #this本质：当前对象的地址
      #有对象的创建过程可知，我们在构造方法中依旧可以使用this关键字
      #this最常用的用法  usage
          #在程序产生二义性情况是，我们使用this关键字：
              #普通方法：this指代调用对象的地址
              #构造方法:this指代需要被初始化对象的地址
          #this关键字调用重载构造方法，避免相同初始化语句，但是只能在构造方法中使用，
          并且必须位于构造方法的第一句
          #this不能用于static的方法中
          this（X）   this（）
  #super关键字：
      #本质：指向直接父类的引用
      #super（）
      #构造方法重载调用父类的无参构造，必须位于构造方法的第一句
  #static关键字
      #用static修饰的属性 是类属性 叫做类变量（静态成员变量） --->因为属性是指成员变量
      #其生命周期和类相同  类生我生 类亡我亡
      #类变量特点：
          #为该类共同的变量，属于类，被该类的所有对象共享，在类被载入时显示化
