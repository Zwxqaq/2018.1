二叉查找树
  使用二叉查找
  O(logn)
  节点左边的数都小于该节点
  节点右边的数都大于该节点
影响程序运行的瓶颈： IO

B-Tree  平衡多路查找树
定于：
  根节点至少含有2个孩子
  树中每个节点最多含有m个孩子  m>=2
  除了根节点和叶节点外，其他每个节点至少有ceil(m/2)个孩子
    ceil为取上限
  所有叶子节点都在同一层
  假设每个非终端节点包含n个关键字信息：
    a）Ki(i=1...n)为关键字，且关键字按顺序升序排序K(i-1) < K(i)
    b)关键字个数n必须满足：[ceil(m/2)-1] <= n <= m -1
    c)非叶子节点的指针：P[1],P[2],..,P[M] 其中P[1]指向关键字小于K[1]的子树，
    p[M]指向关键字大于K[M-1]的子树，其中P[i]指向关键字属于(K[i-1],k[i])的子树
    
                                    17     35
                                   p1   p2 p3
                            /           |        \
                          8 12        26 30     65 87
                        p1 p2 p3     p1 p2 p3   p1 p2 p3
                    /      |     \      |      /    |    \
                  3 5    9  10  13 15  28 29 36 60 75 79 90 99
             
B+-Tree
容纳更多关键字
读写代价更低
更适合做存储索引
查询效率稳定

Hash索引
比B+-Tree索引效率高 但是：
只能满足 = 和 IN ， 不能进行范围查询
是用组合索引键进行查询，不能运用部分索引来进行查询
遇到大量hash值相等情况，性能不一定比B-Tree高      有可能变成线性结构                        

如何调优mysql
show VARIABLES like '%quer%';
show status like '%slow_queries%';  查询慢查询数量
set global slow_query_log = on;
set 慢搜索时间为1s
执行一条慢查询语句
explain 慢查询语句,通过查看type 和  extra字段来分析慢查询语句，进行优化
type为index或者all，extra为using filesort或者  
type 为all表示全表扫描
将慢查询改成走索引的方式就能提高速度
1加索引 alter table xxx add index xxxx; 通过加索引也可以优化查询
2更换慢查询为已经存在索引的查询
走主键索引查询未必比其余的索引键查询来的快
select count(xx) from xx;
select count(xx) from xx force index(primary);
通过比较其余键和索引键来查看查询的时间，不一定主键就快！

根据慢日志定位慢sql
通过explain工具分析sql
修改sql或者尽量让sql走索引

联合索引
key `index_area_title`(`area`,`title`)
通过explain查看其的type
最左匹配原则：
  即mysql一直向右匹配知道遇到范围查询，就停止匹配
  例如a = 3 and b = 4 and c > 5 and d = 6 
  abc索引匹配后，因为遇到范围查询就停止了接下来的查询
范围查询 > < between like 
= in 可以乱序,顺序不影响































